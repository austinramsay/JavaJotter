/*
 * MoveContentWindow.java
 *
 * Created on Apr 18, 2025, 11:05:36 AM
 */

package com.austinramsay.javajotter.gui;

import com.austinramsay.javajotter.ContentManager;
import com.austinramsay.javajotterlibrary.Entity;
import com.austinramsay.javajotterlibrary.Notebook;
import javax.swing.border.TitledBorder;
import javax.swing.DefaultComboBoxModel;
import java.util.ArrayList;

/**
 *
 * @author aramsay
 */
public class MoveEntityWindow extends javax.swing.JFrame {

	private ContentManager cntMgr;
	private Entity entityType;
	private Integer entityId;
	private String noParentOption = "(No Parent)";
	DefaultComboBoxModel dropdownModel;

    /** Creates new form MoveContentWindow */
    public MoveEntityWindow(
			ContentManager cntMgr,
			java.awt.Component c,
			Entity entityType,
			Integer entityId,
			String currentParentName) {
		this.cntMgr = cntMgr;
		this.entityType = entityType;
		this.entityId = entityId;

        initComponents();

		String borderTitle = "";
		if (entityType == Entity.NOTEBOOK) {
			borderTitle = "Move Notebook";
		} else if (entityType == Entity.NOTE) {
			borderTitle="Move Note";
		}
		TitledBorder border = (TitledBorder)jPanel1.getBorder();
		border.setTitle(borderTitle);

		currentParentLabel.setText(currentParentName);

		ArrayList<Notebook> availableNbs = new ArrayList<Notebook>(cntMgr.getLocalNotebooks());
		boolean addNoParentOption = false;
		// If we're moving a notebook, we don't want the option to move it to itself or to the already assigned parent
		if (entityType == Entity.NOTEBOOK) {
			availableNbs.remove(cntMgr.getNotebook(entityId));
			if (cntMgr.getNotebook(entityId).getParentId() != null) {
				availableNbs.remove(cntMgr.getNotebook(cntMgr.getNotebook(entityId).getParentId()));
				addNoParentOption = true;
			}
			availableNbs.removeAll(cntMgr.getAllChildNotebooks(entityId));
		} else if (entityType == Entity.NOTE) {
			availableNbs.remove(cntMgr.getNotebook(cntMgr.getNote(entityId).getNotebookId()));
		}

		if (availableNbs.isEmpty()) {
			dropdownModel = new DefaultComboBoxModel();
			dropdownModel.addElement("(No targets available)");
			notebooksDropdown.setEnabled(false);
			moveButton.setEnabled(false);
		} else {
			dropdownModel = new DefaultComboBoxModel(new java.util.Vector(availableNbs));
			if (addNoParentOption)
				dropdownModel.insertElementAt(noParentOption, 0);
		}
		notebooksDropdown.setModel(dropdownModel);
		notebooksDropdown.setSelectedIndex(0);

		super.setLocationRelativeTo(c);
		setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        staticCurrentParentLabel = new javax.swing.JLabel();
        currentParentLabel = new javax.swing.JLabel();
        moveToLabel = new javax.swing.JLabel();
        notebooksDropdown = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        moveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(320, 112));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("EntityType"));
        jPanel1.setLayout(new java.awt.GridLayout(2, 2));

        staticCurrentParentLabel.setText("Current parent:");
        jPanel1.add(staticCurrentParentLabel);

        currentParentLabel.setText("(none)");
        jPanel1.add(currentParentLabel);

        moveToLabel.setText("Move to:");
        jPanel1.add(moveToLabel);

        jPanel1.add(notebooksDropdown);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        moveButton.setText("Move");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });
        jPanel2.add(moveButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel2.add(cancelButton);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		super.dispose();
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
		Integer destinationNbId = null;

		if (dropdownModel.getSelectedItem() instanceof Notebook) {
			Notebook destinationNb = (Notebook)dropdownModel.getSelectedItem();
			destinationNbId = destinationNb.getId();
		}

		cntMgr.moveEntityTo(entityType, entityId, destinationNbId);

		super.dispose();
	}//GEN-LAST:event_moveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel currentParentLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton moveButton;
    private javax.swing.JLabel moveToLabel;
    private javax.swing.JComboBox notebooksDropdown;
    private javax.swing.JLabel staticCurrentParentLabel;
    // End of variables declaration//GEN-END:variables

}
